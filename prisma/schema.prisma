datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  // optionally, add a directUrl for introspection/fallback
  // directUrl   = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  binaryTargets = ["native", "windows"]
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  name                String?
  picture             String?
  provider            String
  providerId          String               @map("provider_id")
  lastLogin           DateTime?            @map("last_login")
  transcribeEvents    TranscribeEvent[]    
  transcriptionUsages TranscriptionUsage[] 
  userSubscriptions   UserSubscription[]   
  @@map("users")
}

model Profile {
  id          String   @id @default(uuid()) @db.Uuid
  username    String
  displayName String   @map("display_name")
  createdAt   DateTime @map("created_at")
  updatedAt   DateTime @map("updated_at")
  @@map("profiles")
}

model TranscribeEvent {
  id            Int      @id @default(autoincrement())
  userId        Int?     @map("user_id")
  videoId       String   @map("video_id")
  provider      String   @default("unknown")
  audioSeconds  Int      @map("audio_seconds")
  billedSeconds Int      @map("billed_seconds")
  videoDuration Int?     @map("video_duration_seconds")
  createdAt     DateTime @default(now()) @map("created_at")
  success       Boolean
  user          User?    @relation(fields: [userId], references: [id])
  @@index([userId], name: "idx_transcribe_events_user")
  @@map("transcribe_events")
}

model TranscriptionUsage {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  fileName        String   @map("file_name")
  durationSeconds Int      @map("duration_seconds")
  user            User     @relation(fields: [userId], references: [id])
  @@map("transcription_usage")
}

model SubscriptionPlan {
  id                        Int                   @id @default(autoincrement())
  name                      String
  monthlyTranscriptionHours Int      @map("monthly_transcription_hours")
  userSubscriptions         UserSubscription[]    
  @@map("subscription_plans")
}

model UserSubscription {
  id               Int              @id @default(autoincrement())
  userId           Int              @map("user_id")
  planId           Int              @map("plan_id")
  startsAt         DateTime         @map("starts_at")
  expiresAt        DateTime?        @map("expires_at")
  user             User             @relation(fields: [userId], references: [id])
  subscriptionPlan SubscriptionPlan @relation(fields: [planId], references: [id])
  @@map("user_subscriptions")
} 